/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import interpret.*;
import tree.*;
import tree.expression.*;
import tree.statement.*;

public class Parser implements ParserConstants {

/*
 * Program structuring syntax follows.
 */
  final public 
BlockStatement Start() throws ParseException {BlockStatement bs;
    bs = OuterStatement();
    jj_consume_token(0);
{if ("" != null) return bs;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement OuterStatement() throws ParseException {BlockStatement bs = new BlockStatement(0, 0);
    Statement tmp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case FLOAT:
      case STRING:
      case IF:
      case FOR:
      case WHILE:
      case READ:
      case WRITE:
      case RETURN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case BANG:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(3)) {
        tmp = FunctionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case FLOAT:
        case STRING:
        case IF:
        case FOR:
        case WHILE:
        case READ:
        case WRITE:
        case RETURN:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case BANG:
        case MINUS:{
          tmp = Statement();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
bs.addStatement(tmp);
    }
{if ("" != null) return bs;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {BlockStatement bs = null;
    Statement tmp;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case FLOAT:
      case STRING:
      case IF:
      case FOR:
      case WHILE:
      case READ:
      case WRITE:
      case RETURN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case BANG:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      tmp = Statement();
if (bs == null)
        {
            bs = new BlockStatement(tmp.getLine(), tmp.getColumn());
        }
        bs.addStatement(tmp);
    }
{if ("" != null) return bs;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public 
Expression Expression() throws ParseException {Expression tmp;
    if (jj_2_2(2)) {
      tmp = Assignment();
    } else if (jj_2_3(2)) {
      tmp = ConditionalExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tmp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Assignment() throws ParseException {Token identifier;
    Expression exp;
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    exp = Expression();
{if ("" != null) return new AssignmentExpression(identifier.beginLine, identifier.beginColumn, identifier.image, exp);}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {Expression result, firstAlternative = null, secondAlternative = null;
    result = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUESTION:{
      jj_consume_token(QUESTION);
      firstAlternative = Expression();
      jj_consume_token(COLON);
      secondAlternative = ConditionalExpression();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
if (firstAlternative == null)
    {
        {if ("" != null) return result;}
    }
    else {if ("" != null) return new ConditionalExpression(result.getLine(), result.getColumn(), result, firstAlternative, secondAlternative);}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {Expression result, tmp = null;
    result = ConditionalAndExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      tmp = ConditionalAndExpression();
result = new BinaryExpression(result.getLine(), result.getColumn(), result, tmp, BinaryOperator.OR);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {Expression result, tmp;
    result = RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      tmp = RelationalExpression();
result = new BinaryExpression(result.getLine(), result.getColumn(), result, tmp, BinaryOperator.AND);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {Token operator;
    Expression result, tmp = null;
    result = AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        operator = jj_consume_token(LT);
        break;
        }
      case GT:{
        operator = jj_consume_token(GT);
        break;
        }
      case LE:{
        operator = jj_consume_token(LE);
        break;
        }
      case GE:{
        operator = jj_consume_token(GE);
        break;
        }
      case EQ:{
        operator = jj_consume_token(EQ);
        break;
        }
      case NE:{
        operator = jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = AdditiveExpression();
result = new BinaryExpression(result.getLine(), result.getColumn(), result, tmp, BinaryOperator.getFromString(operator.image));
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {Token operator;
     Expression result, tmp = null;
    result = MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        operator = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        operator = jj_consume_token(MINUS);
        break;
        }
      case DOT:{
        operator = jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = MultiplicativeExpression();
result = new BinaryExpression(result.getLine(), result.getColumn(), result, tmp, BinaryOperator.getFromString(operator.image));
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {Token operator;
    Expression result, tmp = null;
    result = UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        operator = jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        operator = jj_consume_token(SLASH);
        break;
        }
      case REM:{
        operator = jj_consume_token(REM);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = UnaryExpression();
result = new BinaryExpression(result.getLine(), result.getColumn(), result, tmp, BinaryOperator.getFromString(operator.image));
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {Token operator = new Token(), identifier, lparen;
    Literal literal;
    Expression exp;
    UnaryExpression unaryExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:{
        operator = jj_consume_token(BANG);
        break;
        }
      case MINUS:{
        operator = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      lparen = jj_consume_token(LPAREN);
      exp = Expression();
      jj_consume_token(RPAREN);
unaryExpression = new UnaryExpression(lparen.beginLine, lparen.beginColumn, exp, UnaryOperator.getFromString(operator.image));
      break;
      }
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:{
      literal = Literal();
unaryExpression = new UnaryExpression(literal.getLine(), literal.getColumn(), literal, UnaryOperator.getFromString(operator.image));
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_4(2)) {
        exp = FunctionCallExpression();
unaryExpression = new UnaryExpression(exp.getLine(), exp.getColumn(), exp, UnaryOperator.getFromString(operator.image));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          identifier = jj_consume_token(IDENTIFIER);
unaryExpression = new UnaryExpression(identifier.beginLine, identifier.beginColumn,
                                           new IdentifierExpression(identifier.beginLine, identifier.beginColumn, identifier.image), UnaryOperator.getFromString(operator.image));
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return unaryExpression;}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {Token literal;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      literal = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      literal = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      literal = jj_consume_token(STRING_LITERAL);
      break;
      }
    case BOOLEAN_LITERAL:{
      literal = jj_consume_token(BOOLEAN_LITERAL);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
DataType type = DataType.BOOLEAN;

        switch(literal.kind)
        {
            case ParserConstants.INTEGER_LITERAL:
                type = DataType.INTEGER; break;
            case ParserConstants.FLOATING_POINT_LITERAL:
                type = DataType.FLOAT; break;
            case ParserConstants.STRING_LITERAL:
                type = DataType.STRING; break;
        }

        {if ("" != null) return new Literal(literal.beginLine, literal.beginColumn, type, literal.image);}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public 
Statement Statement() throws ParseException {Statement result = null;
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      result = EmptyStatement();
      break;
      }
    case RETURN:{
      result = ReturnStatement();
      break;
      }
    case BOOLEAN:
    case INT:
    case FLOAT:
    case STRING:{
      result = VariableDeclaration();
      break;
      }
    case READ:
    case WRITE:{
      result = IOStatement();
      break;
      }
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case MINUS:{
      exp = Expression();
      jj_consume_token(SEMICOLON);
{if ("" != null) return new ExpressionStatement(exp.getLine(), exp.getColumn(), exp);}
      break;
      }
    case IF:{
      result = IfStatement();
      break;
      }
    case FOR:{
      result = ForStatement();
      break;
      }
    case WHILE:{
      result = WhileStatement();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Statement VariableDeclaration() throws ParseException {Token type;
    DeclarationStatement declaration;
    Expression expression = null;
    String identifier;
    DataType dataType;
    type = Type();
dataType = DataType.fromString(type.image);
        declaration = new DeclarationStatement(type.beginLine, type.beginColumn, dataType);
    identifier = VariableIdentifier(dataType);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      expression = Expression();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
declaration.addIdentifier(identifier, expression);
        expression = null;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      identifier = VariableIdentifier(dataType);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        expression = Expression();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
declaration.addIdentifier(identifier, expression);
            expression = null;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return declaration;}
    throw new Error("Missing return statement in function");
  }

  final public Token Type() throws ParseException {Token type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      type = jj_consume_token(BOOLEAN);
      break;
      }
    case FLOAT:{
      type = jj_consume_token(FLOAT);
      break;
      }
    case INT:{
      type = jj_consume_token(INT);
      break;
      }
    case STRING:{
      type = jj_consume_token(STRING);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public String VariableIdentifier(DataType type) throws ParseException {Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
{if ("" != null) return identifier.image;}
    throw new Error("Missing return statement in function");
  }

  final public Statement EmptyStatement() throws ParseException {Token token;
    token = jj_consume_token(SEMICOLON);
{if ("" != null) return new EmptyStatement(token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Statement IOStatement() throws ParseException {Statement statement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case READ:{
      statement = ReadStatement();
      break;
      }
    case WRITE:{
      statement = WriteStatement();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public Statement ReadStatement() throws ParseException {ReadStatement statement;
    String identifier;
    Token token;
    token = jj_consume_token(READ);
statement = new ReadStatement(token.beginLine, token.beginColumn);
    identifier = ReadIdentifier();
statement.addIdentifier(identifier);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      identifier = ReadIdentifier();
statement.addIdentifier(identifier);
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public String ReadIdentifier() throws ParseException {Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
{if ("" != null) return identifier.image;}
    throw new Error("Missing return statement in function");
  }

  final public Statement WriteStatement() throws ParseException {WriteStatement statement;
    Expression expression;
    Token token;
    token = jj_consume_token(WRITE);
statement = new WriteStatement(token.beginLine, token.beginColumn);
    expression = Expression();
statement.addExpression(expression);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      expression = Expression();
statement.addExpression(expression);
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public Statement IfStatement() throws ParseException {Expression condition;
    IfStatement ifStatement;
    BlockStatement statements, elseBlock;
    Token token;
    token = jj_consume_token(IF);
ifStatement = new IfStatement(token.beginLine, token.beginColumn);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(THEN);
    statements = BlockStatement();
ifStatement.addBranch(condition, statements);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      jj_consume_token(ELSE_IF);
      jj_consume_token(LPAREN);
      condition = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(THEN);
      statements = BlockStatement();
ifStatement.addBranch(condition, statements);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseBlock = BlockStatement();
ifStatement.setElseBlock(elseBlock);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
{if ("" != null) return ifStatement;}
    throw new Error("Missing return statement in function");
  }

  final public Statement ForStatement() throws ParseException {Expression initializer = null, condition = null, increment = null;
    BlockStatement statements;
    Token token;
    token = jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case MINUS:{
      initializer = Expression();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case MINUS:{
      condition = Expression();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case MINUS:{
      increment = Expression();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(BEGIN);
    statements = BlockStatement();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ForStatement(token.beginLine, token.beginColumn, initializer, condition, increment, statements);}
    throw new Error("Missing return statement in function");
  }

  final public Statement FunctionStatement() throws ParseException {Token type, identifier, begin;
    BlockStatement blockStatement;
    FunctionStatement functionStatement = null;
    Symbol parameter;
    type = Type();
    identifier = jj_consume_token(IDENTIFIER);
functionStatement = new FunctionStatement(type.beginLine, type.beginColumn, DataType.fromString(type.image), identifier.image);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case INT:
    case FLOAT:
    case STRING:{
      parameter = FunctionParameter();
functionStatement.addParameter(parameter);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        parameter = FunctionParameter();
functionStatement.addParameter(parameter);
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    begin = jj_consume_token(BEGIN);
    blockStatement = BlockStatement();
functionStatement.setBlockStatement(blockStatement);
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
{if ("" != null) return functionStatement;}
    throw new Error("Missing return statement in function");
  }

  final public Statement ReturnStatement() throws ParseException {Token token;
    Expression expression;
    token = jj_consume_token(RETURN);
    expression = Expression();
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ReturnStatement(token.beginLine, token.beginColumn, expression);}
    throw new Error("Missing return statement in function");
  }

  final public Symbol FunctionParameter() throws ParseException {Token type;
    Token identifier;
    type = Type();
    identifier = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Symbol(identifier.image, DataType.fromString(type.image));}
    throw new Error("Missing return statement in function");
  }

  final public Expression FunctionCallExpression() throws ParseException {Token identifier;
    FunctionCallExpression functionCallExpression = null;
    Expression parameter;
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
functionCallExpression = new FunctionCallExpression(identifier.beginLine, identifier.beginColumn, identifier.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case MINUS:{
      parameter = Expression();
functionCallExpression.addParameter(parameter);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        parameter = Expression();
functionCallExpression.addParameter(parameter);
      }
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return functionCallExpression;}
    throw new Error("Missing return statement in function");
  }

  final public Statement WhileStatement() throws ParseException {Token token;
    Expression condition;
    BlockStatement blockStatement;
    token = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(BEGIN);
    blockStatement = BlockStatement();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new WhileStatement(token.beginLine, token.beginColumn, condition, blockStatement);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xd798f800,0xd798f800,0xd798f800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd4000000,0x0,0xd4000000,0xd798f800,0x0,0x0,0x0,0x7800,0x1800000,0x0,0x0,0x40000,0x20000,0xd4000000,0xd4000000,0xd4000000,0x0,0x7800,0x0,0xd4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100429,0x100429,0x100429,0x800,0x20000,0x40000,0x1e300,0x1e300,0x4180000,0x4180000,0x3800000,0x3800000,0x100400,0x100400,0x8,0x1,0x0,0x100429,0x80,0x40,0x80,0x0,0x0,0x40,0x40,0x0,0x0,0x100409,0x100409,0x100409,0x40,0x0,0x40,0x100409,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
